from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    CommandHandler, MessageHandler, CallbackQueryHandler,
    ConversationHandler, ContextTypes, filters
)
from shared import user_lang
from languages import questions
from storage import save_to_json
from utils import validate_troop_input
import random
import re

user_answers = {}

(
    STEP_NICK, STEP_ALLIANCE, STEP_TYPE, STEP_SIZE,
    STEP_TIER, STEP_CAPACITY, STEP_SHIFT, STEP_CAPTAIN
) = range(8)

tips = {
    "ru": [
        "üõ° –ù–∞–¥–µ–Ω—å —â–∏—Ç –≤–æ –≤—Ä–µ–º—è –î–ó, —á—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ—Å—É—Ä—Å—ã!",
        "üè∞ –£—á–∞—Å—Ç–≤—É–π –≤ –∑–∞—â–∏—Ç–µ –±–∞—à–µ–Ω, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –±–æ–Ω—É—Å—ã –∞–ª—å—è–Ω—Å–∞.",
        "‚öîÔ∏è –†–∞–∑–º–µ—â–∞–π —é–Ω–∏—Ç—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–≥–æ —Ç–∏–ø–∞ –≤ –±–∞—à–Ω–µ.",
        "üì¶ –ü—Ä–æ–≤–µ—Ä—å –≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å–≤–æ–∏—Ö –æ—Ç—Ä—è–¥–æ–≤ –ø–µ—Ä–µ–¥ —Å–æ–±—ã—Ç–∏–µ–º.",
        "‚è∞ –ù–µ –∑–∞–±—É–¥—å –ø—Ä–æ —Å–º–µ–Ω—É –ø–æ –≤—Ä–µ–º–µ–Ω–∏ ‚Äî –±—É–¥—å –æ–Ω–ª–∞–π–Ω –∑–∞—Ä–∞–Ω–µ–µ!",
        "üëë –ö–æ—Ä–æ–ª—å –ü—É—Å—Ç–æ—à–∏ —Ç—Ä–µ–±—É–µ—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏–∏ ‚Äî –ø–∏—à–∏ –≤ –∞–ª—å—è–Ω—Å-—á–∞—Ç–µ!",
        "üö´ –ï—Å–ª–∏ –Ω–µ –º–æ–∂–µ—à—å —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å ‚Äî –ø—Ä–µ–¥—É–ø—Ä–µ–¥–∏ –∏ –Ω–µ –∑–∞–Ω–∏–º–∞–π —Å–ª–æ—Ç.",
        "üí¨ –ù–∞–∑–Ω–∞—á–∞–π –∫–∞–ø–∏—Ç–∞–Ω–æ–≤ –∑–∞—Ä–∞–Ω–µ–µ, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø—É—Ç–∞–Ω–∏—Ü—ã.",
        "üß™ –£—Å–∏–ª–∏–≤–∞–π –æ—Ç—Ä—è–¥ –±–∞—Ñ—Ñ–∞–º–∏ –ø–µ—Ä–µ–¥ –±–∏—Ç–≤–æ–π –∑–∞ –±–∞—à–Ω—é.",
        "üîÑ –ü—Ä–æ–≤–µ—Ä—è–π —Å–≤–æ—é —Å–º–µ–Ω—É –∏ —Ç–∏–ø –≤–æ–π—Å–∫ ‚Äî –Ω–µ –ø–µ—Ä–µ–ø—É—Ç–∞–π!",
        "üì¶ –í—Å–∫—Ä—ã–≤–∞–π —è—â–∏–∫–∏ –ø–æ–¥ –∏–≤–µ–Ω—Ç—ã ‚Äî –ø–æ–ª—É—á–∏—à—å –±–æ–ª—å—à–µ –Ω–∞–≥—Ä–∞–¥.",
        "üß± –ù–µ —Ö—Ä–∞–Ω–∏ —Ä–µ—Å—É—Ä—Å—ã –Ω–∞ —Å—Ç–µ–Ω–µ ‚Äî –∏—Ö –ª–µ–≥–∫–æ –ø–æ—Ç–µ—Ä—è—Ç—å.",
        "üïä –ï—Å–ª–∏ –≤—ã—à–µ–ª –Ω–∞ –ø–ª–∏—Ç–∫—É –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ —Å –≤—Ä–∞–≥–æ–º ‚Äî –Ω–∞–¥–µ–Ω—å —â–∏—Ç!",
        "‚õè –ù–µ —Å–æ–±–∏—Ä–∞–π —Ä–µ—Å—É—Ä—Å—ã –≤ –≥—Ä—è–∑–∏ –≤–æ –≤—Ä–µ–º—è –ü—É—Å—Ç–æ—à–∏ ‚Äî —ç—Ç–æ –æ–ø–∞—Å–Ω–æ.",
        "üõë –ù–µ –ø–∏—à–∏ –≤ –±–æ–µ–≤–æ–º –¥–∏–≤–∏–∑–∏–æ–Ω–µ –¥–æ –¥–æ–≥–æ–≤–æ—Ä–∞ –æ –ù–ê–ü.",
        "‚ö†Ô∏è –ù–µ –∞—Ç–∞–∫—É–π —á—É–∂–∏–µ –±–∞—à–Ω–∏ –¥–æ –¥–æ–≥–æ–≤–æ—Ä–∞ –æ –ù–ê–ü.",
        "üö´ –ù–∞–ø–∞–¥–µ–Ω–∏—è –Ω–∞ –±–∞—à–Ω–∏ –≤ —Å–≤–æ—ë–º —Ä–µ–≥–∏–æ–Ω–µ –∑–∞–ø—Ä–µ—â–µ–Ω—ã.",
        "üèï –ù–µ —Å—Ç–∞–≤—å —Å–≤–æ—é —à—Ç–∞–±-–∫–≤–∞—Ä—Ç–∏—Ä—É –Ω–∞ –≥—Ä—è–∑—å ‚Äî —ç—Ç–æ –æ–ø–∞—Å–Ω–æ."
    ],
    "en": [],
    "de": []
}

# –°—Ç–∞—Ä—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
async def registration_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    lang = user_lang.get(chat_id, "ru")
    user_answers[chat_id] = []

    if update.callback_query:
        await update.callback_query.answer()
        await update.callback_query.message.reply_text(questions[lang][0])
    else:
        await update.message.reply_text(questions[lang][0])

    return STEP_NICK

# –û—Ç–≤–µ—Ç—ã —Ç–µ–∫—Å—Ç–æ–º
async def collect_answer(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    lang = user_lang.get(chat_id, "ru")
    text = update.message.text.strip()
    step = len(user_answers.get(chat_id, []))

    if not text:
        await update.message.reply_text({
            "ru": "–≠—Ç–æ –ø–æ–ª–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç.",
            "de": "Dieses Feld ist erforderlich. Bitte gib eine Antwort ein.",
            "en": "This field is required. Please provide an answer."
        }[lang])
        return step

    if step == STEP_ALLIANCE:
        if re.search(r"[–ê-–Ø–∞-—è–Å—ë]", text):
            await update.message.reply_text({
                "ru": "–ù–∞–∑–≤–∞–Ω–∏–µ –∞–ª—å—è–Ω—Å–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–∞ –ª–∞—Ç–∏–Ω–∏—Ü–µ (–±–µ–∑ –∫–∏—Ä–∏–ª–ª–∏—Ü—ã).",
                "de": "Der Allianzname darf keine kyrillischen Buchstaben enthalten.",
                "en": "Alliance name must not contain Cyrillic letters."
            }[lang])
            return step

    if step in [STEP_SIZE, STEP_CAPACITY]:
        if not validate_troop_input(text):
            await update.message.reply_text({
                "ru": "–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ —á–∏—Å–ª–æ–º –Ω–µ –º–µ–Ω–µ–µ 6 –∑–Ω–∞–∫–æ–≤, –Ω–∞–ø—Ä–∏–º–µ—Ä: 456000",
                "de": "Bitte gib eine Zahl mit mindestens 6 Zeichen ein, z.‚ÄØB.: 456000",
                "en": "Enter a number with at least 6 characters, e.g.: 456000"
            }[lang])
            return step

    user_answers[chat_id].append(text)
    step += 1

    if step == STEP_TYPE:
        return await send_troop_type_buttons(update, lang)
    elif step == STEP_SHIFT:
        return await send_shift_buttons(update, lang)
    elif step == STEP_CAPTAIN:
        return await send_captain_buttons(update, lang)
    elif step < len(questions[lang]):
        await update.message.reply_text(questions[lang][step])
        return step
    else:
        save_to_json(chat_id, user_answers[chat_id])
        await update.message.reply_text(get_thank_you(lang))
        await update.message.reply_text(random.choice(tips[lang]))
        return ConversationHandler.END

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫
async def handle_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    chat_id = query.message.chat_id
    lang = user_lang.get(chat_id, "ru")
    await query.answer()

    user_answers.setdefault(chat_id, []).append(query.data)
    step = len(user_answers[chat_id])

    if step == STEP_SHIFT:
        return await send_shift_buttons(update, lang)
    elif step == STEP_CAPTAIN:
        return await send_captain_buttons(update, lang)
    elif step < len(questions[lang]):
        await query.message.reply_text(questions[lang][step])
        return step
    else:
        save_to_json(chat_id, user_answers[chat_id])
        await query.message.reply_text(get_thank_you(lang))
        await query.message.reply_text(random.choice(tips[lang]))
        return ConversationHandler.END

# –ë–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å

def get_thank_you(lang):
    return {
        "ru": "–°–ø–∞—Å–∏–±–æ! –í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. üëç",
        "de": "Danke! Du bist angemeldet. üëç",
        "en": "Thank you! You are registered. üëç"
    }[lang]

# –ö–Ω–æ–ø–∫–∏ ‚Äî —Ç–∏–ø –≤–æ–π—Å–∫
async def send_troop_type_buttons(update, lang):
    options = {
        "ru": ["–±–∞–π–∫–µ—Ä", "–±–æ–µ—Ü", "—Å—Ç—Ä–µ–ª–æ–∫"],
        "de": ["Biker", "K√§mpfer", "Sch√ºtze"],
        "en": ["biker", "fighter", "shooter"]
    }
    buttons = [[InlineKeyboardButton(text=opt, callback_data=opt)] for opt in options[lang]]
    await update.message.reply_text(
        questions[lang][STEP_TYPE],
        reply_markup=InlineKeyboardMarkup(buttons)
    )
    return STEP_TYPE

# –ö–Ω–æ–ø–∫–∏ ‚Äî —Å–º–µ–Ω–∞
async def send_shift_buttons(update, lang):
    options = {
        "ru": ["1", "2", "–æ–±–µ"],
        "de": ["1", "2", "beide"],
        "en": ["1", "2", "both"]
    }
    buttons = [[InlineKeyboardButton(text=opt, callback_data=opt)] for opt in options[lang]]
    target = update.callback_query.message if update.callback_query else update.message
    await target.reply_text(
        questions[lang][STEP_SHIFT],
        reply_markup=InlineKeyboardMarkup(buttons)
    )
    return STEP_SHIFT

# –ö–Ω–æ–ø–∫–∏ ‚Äî –∫–∞–ø–∏—Ç–∞–Ω
async def send_captain_buttons(update, lang):
    options = {
        "ru": ["–¥–∞", "–Ω–µ—Ç"],
        "de": ["ja", "nein"],
        "en": ["yes", "no"]
    }
    buttons = [[InlineKeyboardButton(text=opt, callback_data=opt)] for opt in options[lang]]
    target = update.callback_query.message if update.callback_query else update.message
    await target.reply_text(
        questions[lang][STEP_CAPTAIN],
        reply_markup=InlineKeyboardMarkup(buttons)
    )
    return STEP_CAPTAIN

# Handler

def get_registration_handler():
    return ConversationHandler(
        entry_points=[
            CommandHandler("register", registration_start),
            CallbackQueryHandler(registration_start, pattern="^start_registration$"),
            MessageHandler(filters.Regex("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è"), registration_start)
        ],
        states={
            STEP_NICK: [MessageHandler(filters.TEXT & ~filters.COMMAND, collect_answer)],
            STEP_ALLIANCE: [MessageHandler(filters.TEXT & ~filters.COMMAND, collect_answer)],
            STEP_TYPE: [CallbackQueryHandler(handle_button)],
            STEP_SIZE: [MessageHandler(filters.TEXT & ~filters.COMMAND, collect_answer)],
            STEP_TIER: [MessageHandler(filters.TEXT & ~filters.COMMAND, collect_answer)],
            STEP_CAPACITY: [MessageHandler(filters.TEXT & ~filters.COMMAND, collect_answer)],
            STEP_SHIFT: [CallbackQueryHandler(handle_button)],
            STEP_CAPTAIN: [CallbackQueryHandler(handle_button)],
        },
        fallbacks=[]
    )