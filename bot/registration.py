from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    CommandHandler, MessageHandler, CallbackQueryHandler,
    ConversationHandler, ContextTypes, filters
)
from config import ADMINS
from shared import user_lang
from languages import questions
from storage import save_to_json, load_players
from utils import validate_troop_input, validate_tier, validate_power
import re
import random

user_answers = {}
(
    STEP_NICK, STEP_ALLIANCE, STEP_TYPE, STEP_SIZE,
    STEP_TIER, STEP_CAPACITY, STEP_SHIFT, STEP_CAPTAIN, STEP_POWER
) = range(9)

tips = {
    "ru": [
        "üåπ –ù–∞–¥–µ–Ω—å —â–∏—Ç –≤–æ –≤—Ä–µ–º—è –î–ó, —á—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ—Å—É—Ä—Å—ã!",
        "üè† –£—á–∞—Å—Ç–≤—É–π –≤ –∑–∞—â–∏—Ç–µ –±–∞—à–µ–Ω, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –±–æ–Ω—É—Å—ã –∞–ª—å—è–Ω—Å–∞.",
        "‚öîÔ∏è –†–∞–∑–º–µ—â–∞–π —é–Ω–∏—Ç—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–≥–æ —Ç–∏–ø–∞ –≤ –±–∞—à–Ω–µ.",
        "üì¶ –ü—Ä–æ–≤–µ—Ä—å –≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å–≤–æ–∏—Ö –æ—Ç—Ä—è–¥–æ–≤ –ø–µ—Ä–µ–¥ —Å–æ–±—ã—Ç–∏–µ–º.",
        "‚è∞ –ù–µ –∑–∞–±—É–¥—å –ø—Ä–æ —Å–º–µ–Ω—É –ø–æ –≤—Ä–µ–º–µ–Ω–∏ ‚Äî –±—É–¥—å –æ–Ω–ª–∞–π–Ω –∑–∞—Ä–∞–Ω–µ–µ!"
    ]
}

async def registration_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    lang = user_lang.get(chat_id, "ru")
    user_answers[chat_id] = []
    await (update.callback_query.message if update.callback_query else update.message).reply_text(questions[lang][0])
    return STEP_NICK

async def collect_answer(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    lang = user_lang.get(chat_id, "ru")
    text = update.message.text.strip()
    step = len(user_answers.get(chat_id, []))

    if not text:
        await update.message.reply_text("–ü–æ–ª–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ.")
        return step

    if step == STEP_NICK:
        if any(p["nickname"].strip().lower() == text.lower() for p in load_players()):
            await update.message.reply_text("‚õî –¢–∞–∫–æ–π –Ω–∏–∫ —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.")
            return STEP_NICK

    if step == STEP_ALLIANCE and (re.search(r"[–ê-–Ø–∞-—è–Å—ë]", text) or len(text) != 3):
        await update.message.reply_text("–ê–ª—å—è–Ω—Å: –ª–∞—Ç–∏–Ω–∏—Ü–∞, 3 –±—É–∫–≤—ã.")
        return STEP_ALLIANCE

    if step == STEP_SIZE and not validate_troop_input(text):
        await update.message.reply_text("–û—Ç—Ä—è–¥: —á–∏—Å–ª–æ –æ—Ç 200000 –¥–æ 700000.")
        return STEP_SIZE

    if step == STEP_TIER and not validate_tier(text):
        await update.message.reply_text("–¢–∏—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç T10 –¥–æ T13.")
        return STEP_TIER

    if step == STEP_CAPACITY and not validate_troop_input(text):
        await update.message.reply_text("–ì—Ä—É–ø–ø–∞: —á–∏—Å–ª–æ –æ—Ç 800000 –¥–æ 3.500.000.")
        return STEP_CAPACITY

    if step == STEP_POWER:
        if not validate_power(text) or int(text) < 300_000_000:
            await update.message.reply_text("–£–∫–∞–∂–∏ —Å–≤–æ—é **–ª–∏—á–Ω—É—é –º–æ—â—å** —á–∏—Å–ª–æ–º –æ—Ç 300.000.000 –∏ –≤—ã—à–µ:")
            return STEP_POWER
        user_answers[chat_id].append(text)
        save_to_json(chat_id, user_answers[chat_id])
        await update.message.reply_text("‚úÖ –ì–æ—Ç–æ–≤–æ!\n" + random.choice(tips[lang]))
        return ConversationHandler.END

    user_answers[chat_id].append(text)
    step += 1

    if step == STEP_TYPE:
        return await send_troop_type_buttons(update, lang)
    elif step == STEP_SHIFT:
        return await send_shift_buttons(update, lang)
    elif step == STEP_CAPTAIN:
        return await send_captain_buttons(update, lang)
    elif step < len(questions[lang]):
        await update.message.reply_text(questions[lang][step])
        return step

    save_to_json(chat_id, user_answers[chat_id])
    await update.message.reply_text("‚úÖ –ì–æ—Ç–æ–≤–æ!\n" + random.choice(tips[lang]))
    return ConversationHandler.END

async def handle_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    chat_id = query.message.chat_id
    lang = user_lang.get(chat_id, "ru")
    step = len(user_answers.get(chat_id, []))
    data = query.data

    if step == STEP_TYPE:
        user_answers[chat_id].append(data)
        await query.message.reply_text(questions[lang][STEP_SIZE])
        return STEP_SIZE

    elif step == STEP_SHIFT:
        user_answers[chat_id].append(data)
        return await send_captain_buttons(update, lang)

    elif step == STEP_CAPTAIN:
        user_answers[chat_id].append(data)
        if data.lower() == "–¥–∞":
            await query.message.reply_text("–£–∫–∞–∂–∏ —Å–≤–æ—é **–ª–∏—á–Ω—É—é –º–æ—â—å** (–æ—Ç 300.000.000):")
            return STEP_POWER
        else:
            user_answers[chat_id].append("0")
            save_to_json(chat_id, user_answers[chat_id])
            await query.message.reply_text("‚úÖ –ì–æ—Ç–æ–≤–æ!\n" + random.choice(tips[lang]))
            return ConversationHandler.END

    return ConversationHandler.END

async def send_troop_type_buttons(update, lang):
    options = {"ru": ["–±–∞–π–∫–µ—Ä", "–±–æ–µ—Ü", "—Å—Ç—Ä–µ–ª–æ–∫"]}
    buttons = [[InlineKeyboardButton(opt, callback_data=opt)] for opt in options[lang]]
    await update.message.reply_text(questions[lang][STEP_TYPE], reply_markup=InlineKeyboardMarkup(buttons))
    return STEP_TYPE

async def send_shift_buttons(update, lang):
    options = {"ru": ["1", "2", "–æ–±–µ"]}
    buttons = [[InlineKeyboardButton(opt, callback_data=opt)] for opt in options[lang]]
    await (update.callback_query.message if update.callback_query else update.message).reply_text(
        questions[lang][STEP_SHIFT], reply_markup=InlineKeyboardMarkup(buttons)
    )
    return STEP_SHIFT

async def send_captain_buttons(update, lang):
    options = {"ru": ["–¥–∞", "–Ω–µ—Ç"]}
    buttons = [[InlineKeyboardButton(opt, callback_data=opt)] for opt in options[lang]]
    await (update.callback_query.message if update.callback_query else update.message).reply_text(
        questions[lang][STEP_CAPTAIN], reply_markup=InlineKeyboardMarkup(buttons)
    )
    return STEP_CAPTAIN

def get_registration_handler():
    return ConversationHandler(
        entry_points=[
            CommandHandler("register", registration_start),
            MessageHandler(filters.Regex("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è"), registration_start)
        ],
        states={
            STEP_NICK: [MessageHandler(filters.TEXT & ~filters.COMMAND, collect_answer)],
            STEP_ALLIANCE: [MessageHandler(filters.TEXT & ~filters.COMMAND, collect_answer)],
            STEP_TYPE: [CallbackQueryHandler(handle_button)],
            STEP_SIZE: [MessageHandler(filters.TEXT & ~filters.COMMAND, collect_answer)],
            STEP_TIER: [MessageHandler(filters.TEXT & ~filters.COMMAND, collect_answer)],
            STEP_CAPACITY: [MessageHandler(filters.TEXT & ~filters.COMMAND, collect_answer)],
            STEP_SHIFT: [CallbackQueryHandler(handle_button)],
            STEP_CAPTAIN: [CallbackQueryHandler(handle_button)],
            STEP_POWER: [MessageHandler(filters.TEXT & ~filters.COMMAND, collect_answer)],
        },
        fallbacks=[]
    )
